import random

def board_reset():
    #벽 = 2(빈곳) 3(벽세운곳)
    #플레이어 = 0(빈곳) 1(있는곳)
    #점수 토큰 = 4(있는곳)
    #보드는 6*6 판이지만 실제로 보이지 않는 벽이 있기 때문에 세운다

    board = [[2,2,2,2,2,2,2,2,2,2,2,2,2],
            [2,0,2,0,2,0,2,0,2,0,2,0,2],
            [2,2,2,2,2,2,2,2,2,2,2,2,2],
            [2,0,2,0,2,0,2,0,2,0,2,0,2],
            [2,2,2,2,2,2,2,2,2,2,2,2,2],
            [2,0,2,0,2,0,2,0,2,0,2,0,2],
            [2,2,2,2,2,2,2,2,2,2,2,2,2],
            [2,0,2,0,2,0,2,0,2,0,2,0,2],
            [2,2,2,2,2,2,2,2,2,2,2,2,2],
            [2,0,2,0,2,0,2,0,2,0,2,0,2],
            [2,2,2,2,2,2,2,2,2,2,2,2,2],
            [2,0,2,0,2,0,2,0,2,0,2,0,2],
            [2,2,2,2,2,2,2,2,2,2,2,2,2]]
    return board

def board_print(board):
    #보드 출력 (일단 터미널에서)
    #벽은 네모, 플레이어는 '우선' 플레이어 1 2 구분하지 않고 X로 표기했다.
    for y in board:
        for x in y:
            if x == 0: print(" ", end = (""))
            elif x == 1: print("X", end = (""))
            elif x == 2: print("□", end = (""))
            elif x == 3: print("■", end = (""))
            elif x == 4: print("T", end = (""))
            else: print("▩", end = (""))
        print()

def random_wall(wall_num, board):
    #랜덤으로 벽세우기를 구현하자

    #벽은 3칸으로 이루어져 있다. 그러면 각 벽이 세워질 수 있는 구간을 계산하자.
    #30 세로벽
    #30 가로벽

    #왼쪽 위부터 1으로 차례대로 순서를 매긴다.
    #난이도에 따른 벽 개수만큼 중복되지 않는 숫자를 뽑아 리스트로 만든다.

    #겹치지 않도록 set를 이용해 뽑음
    while True:
        #뽑은 벽을 배치하고
        random_wall_set = set([])
        while (len(random_wall_set) < wall_num):
            random_wall_set.add(random.randint(0, 59))
        print(random_wall_set)

        #세로벽 좌표
        col_wall = []
        for y in range(1,12,2):
            for x in range(2,11,2):
                col_wall.append([y, x])

        #가로벽 좌표
        row_wall = []
        for y in range(2,11,2):
            for x in range(1,12,2):
                row_wall.append([y, x])



        for z in random_wall_set:
            if z<30:
                #세로벽
                y, x = col_wall[z]
                board[y][x] = 3


            else:
                #가로벽
                y, x = row_wall[z-30]
                board[y][x] = 3

        return board

    #뽑은 벽을 배치하고, 길이 막히는지 안막히는지 검사해야함. 길이 막히면 다시 뽑기
    #미완성

def random_start():
    #캐릭터의 시작을 구현하자. 캐릭터는 1로 표현한다.

    #캐릭터의 시작 지점을 랜덤으로 정한다.
    #나중에 이 지점을 기억해서 벽에 닿으면 돌아올 수 있도록 저장해야 한다.
    pass

def random_score_start():
    #점수 토큰의 시작을 구현하자. 점수 토큰은 4로 표현한다.

    #점수 토큰의 시작 지점을 랜덤으로 정한다.
    #캐릭터의 시작 지점과 너무 가까워서는 안되고 겹쳐서도 안된다.
    #나중에 점수 토큰을 먹으면 다시 시작 지점을 랜덤으로 정해서 또 생성해야한다.
    #점수 토큰은 4로 표시한다.
    pass

def character_move(board):
    #캐릭터의 움직임을 구현하자

    #move input에 위, 아래, 오른쪽, 왼쪽 정보를 받아온다
    #코드는 위 아래 오른쪽 왼쪽 움직이는걸 짜되 이렇게 짜면 된다
    '''
    if move_input == 위:
        character_pos에서 위로 한칸 이동한다음 벽이 2인지 0인지 계산한다
        외벽이면 그냥 갈 수 없음이라고 출력하고
        내벽이면 다시 시작지점으로 보내고 벽이 있었다라고 출력하고
        벽이 없으면 그방면으로 움직이면 된다 (리스트에서 2칸 점프해야 한다)
    '''
    pass
